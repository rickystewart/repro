load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
load("@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
     "feature",
     "flag_group",
     "flag_set",
     "tool_path")

all_compile_actions = [
    ACTION_NAMES.c_compile,
    ACTION_NAMES.cpp_compile,
    ACTION_NAMES.linkstamp_compile,
    ACTION_NAMES.assemble,
    ACTION_NAMES.preprocess_assemble,
    ACTION_NAMES.cpp_header_parsing,
    ACTION_NAMES.cpp_module_compile,
    ACTION_NAMES.cpp_module_codegen,
    ACTION_NAMES.clif_match,
    ACTION_NAMES.lto_backend,
]

all_link_actions = [
    ACTION_NAMES.cpp_link_executable,
    ACTION_NAMES.cpp_link_dynamic_library,
    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
]

def _impl(ctx):
    tool_paths = [
        tool_path(
            name = "gcc",
            path = "bin/x86_64-unknown-linux-gnu-gcc",
        ),
        tool_path(
            name = "ld",
            path = "bin/x86_64-unknown-linux-gnu-ld",
        ),
        tool_path(
            name = "cpp",
            path = "bin/x86_64-unknown-linux-gnu-g++",
        ),
        tool_path(
            name = "gcov",
            path = "bin/x86_64-unknown-linux-gnu-gcov",
        ),
        tool_path(
            name = "nm",
            path = "bin/x86_64-unknown-linux-gnu-nm",
        ),
        tool_path(
            name = "objdump",
            path = "bin/x86_64-unknown-linux-gnu-objdump",
        ),
        tool_path(
            name = "strip",
            path = "bin/x86_64-unknown-linux-gnu-strip",
        ),
        tool_path(
            name = "ar",
            path = "bin/x86_64-unknown-linux-gnu-ar",
        ),
    ]

    opt_feature = feature(name = "opt")
    fastbuild_feature = feature(name = "fastbuild")
    dbg_feature = feature(name = "dbg")

    supports_pic_feature = feature(name = "supports_pic", enabled = True)
    supports_dynamic_linker_feature = feature(name = "supports_dynamic_linker", enabled = False)

    default_compile_flags = feature(
        name = "default_compile_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = all_compile_actions,
                flag_groups = ([
                    flag_group(
                        flags = [
                            "-g1",
                            "-Wall",
                            "-I%{repo_path}/x86_64-unknown-linux-gnu/include/c++/6.5.0",
                        ],
                    ),
                ]),
            ),
        ],
    )

    default_linker_flags = feature(
        name = "default_linker_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = all_link_actions,
                flag_groups = ([
                    flag_group(
                        flags = [
                            "-lstdc++",
			    "-lrt",
                        ],
                    ),
                ]),
            ),
        ],
    )

    features = [
        opt_feature,
        fastbuild_feature,
        dbg_feature,
        supports_pic_feature,
        supports_dynamic_linker_feature,
        default_compile_flags,
        default_linker_flags,
    ]

    return cc_common.create_cc_toolchain_config_info(
        ctx = ctx,
        features = features,
        toolchain_identifier = "x86_64-unknown-linux-gnu-cross-toolchain",
        host_system_name = "x86_64-unknown-linux-gnu",
        target_system_name = "x86_64-unknown-linux-gnu",
        target_cpu = "linux",
        target_libc = "linux",
        compiler = "gcc",
        abi_version = "x86_64-unknown-linux-gnu",
        abi_libc_version = "x86_64-unknown-linux-gnu",
        tool_paths = tool_paths,
        cxx_builtin_include_directories = [
            "%sysroot%/usr/include",
            "%{repo_path}/x86_64-unknown-linux-gnu/include/c++/6.5.0",
            "%{repo_path}/lib/gcc/x86_64-unknown-linux-gnu/6.5.0/include",
            "%{repo_path}/lib/gcc/x86_64-unknown-linux-gnu/6.5.0/include-fixed",
        ],
        builtin_sysroot = "%{repo_path}/x86_64-unknown-linux-gnu/sysroot",
    )

cc_toolchain_config = rule(
    implementation = _impl,
    attrs = {},
    provides = [CcToolchainConfigInfo],
)
